#pragma checksum "C:\Users\Malo Hamon\source\repos\Spendings.WEB\Spendings.WEB\Views\Dashboard\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "047a9cc355f81738f407c426b4a70eab245ba53b"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Dashboard_Index), @"mvc.1.0.view", @"/Views/Dashboard/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Malo Hamon\source\repos\Spendings.WEB\Spendings.WEB\Views\_ViewImports.cshtml"
using Spendings.WEB;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Malo Hamon\source\repos\Spendings.WEB\Spendings.WEB\Views\_ViewImports.cshtml"
using Spendings.WEB.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"047a9cc355f81738f407c426b4a70eab245ba53b", @"/Views/Dashboard/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2ac500cc65326589653e5231efbfd220bff142d5", @"/Views/_ViewImports.cshtml")]
    public class Views_Dashboard_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Spendings.WEB.Controllers.DashboardVm>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "C:\Users\Malo Hamon\source\repos\Spendings.WEB\Spendings.WEB\Views\Dashboard\Index.cshtml"
  
    ViewData["Title"] = "Dashbaord";

    string getPercentageClass(decimal percentage)
    {
        if (percentage > 0)
        {
            return "text-danger";
        }
        else
        {
            return "text-success";
        }
    }

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<div class=\"row\">\r\n    <div class=\"col-xl-6 col-xxl-5 d-flex\">\r\n        <div class=\"w-100\">\r\n            <div class=\"row\">\r\n\r\n");
#nullable restore
#line 23 "C:\Users\Malo Hamon\source\repos\Spendings.WEB\Spendings.WEB\Views\Dashboard\Index.cshtml"
                 foreach (var info in Model.QuickInfo)
                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                    <div class=\"col-sm-6\">\r\n                        <div class=\"card\">\r\n                            <div class=\"card-body\">\r\n                                <h5 class=\"card-title mb-4\">");
#nullable restore
#line 28 "C:\Users\Malo Hamon\source\repos\Spendings.WEB\Spendings.WEB\Views\Dashboard\Index.cshtml"
                                                       Write(info.Title);

#line default
#line hidden
#nullable disable
            WriteLiteral("</h5>\r\n                                <h1 class=\"display-5 mt-1 mb-3\">$ ");
#nullable restore
#line 29 "C:\Users\Malo Hamon\source\repos\Spendings.WEB\Spendings.WEB\Views\Dashboard\Index.cshtml"
                                                             Write(decimal.Round(info.CurrentValue, 2));

#line default
#line hidden
#nullable disable
            WriteLiteral("</h1>\r\n                                <div class=\"mb-1\">\r\n                                    <span");
            BeginWriteAttribute("class", " class=\"", 940, "\"", 989, 1);
#nullable restore
#line 31 "C:\Users\Malo Hamon\source\repos\Spendings.WEB\Spendings.WEB\Views\Dashboard\Index.cshtml"
WriteAttributeValue("", 948, getPercentageClass(info.ComparisonValue), 948, 41, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral("> <i class=\"mdi mdi-arrow-bottom-right\"></i>");
#nullable restore
#line 31 "C:\Users\Malo Hamon\source\repos\Spendings.WEB\Spendings.WEB\Views\Dashboard\Index.cshtml"
                                                                                                                                   Write(info.ComparisonValue > 0 ? "+" : "");

#line default
#line hidden
#nullable disable
            WriteLiteral(" ");
#nullable restore
#line 31 "C:\Users\Malo Hamon\source\repos\Spendings.WEB\Spendings.WEB\Views\Dashboard\Index.cshtml"
                                                                                                                                                                         Write(decimal.Round(info.ComparisonValue, 2));

#line default
#line hidden
#nullable disable
            WriteLiteral("% </span>\r\n                                    <span class=\"text-muted\">");
#nullable restore
#line 32 "C:\Users\Malo Hamon\source\repos\Spendings.WEB\Spendings.WEB\Views\Dashboard\Index.cshtml"
                                                        Write(info.comparisonText);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n");
#nullable restore
#line 37 "C:\Users\Malo Hamon\source\repos\Spendings.WEB\Spendings.WEB\Views\Dashboard\Index.cshtml"
                }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                    <div class=""col-sm-6"">
                        <div class=""card"">
                            <div class=""card-body"">
                                <h5 class=""card-title mb-4"">Predicted Spendings</h5>
                                <h1 class=""display-5 mt-1 mb-3"" id=""predicted-spendings"">$ 0</h1>
                                <div class=""mb-1"">
                                    <span class=""text-muted"" id=""predicted-spendings-message"">by end of month</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
        </div>
    </div>

    <div class=""col-xl-6 col-xxl-7"">
        <div class=""card flex-fill w-100"" id=""graph-card"">
            <div class=""card-header"">

                <h5 class=""card-title mb-0"">Monthly Movement</h5>
            </div>
            <div class=""card-body py-3"">
                <div class=""chart chart-sm"">
                    <can");
            WriteLiteral("vas id=\"chartjs-dashboard-line\"></canvas>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script>

        $(document).ready(function () {
            $('#dashboard-tab').addClass(""active"");
        });


        $(function () {
            var ctx = document.getElementById('chartjs-dashboard-line').getContext(""2d"");
            var gradient = ctx.createLinearGradient(0, 0, 0, 225);
            gradient.addColorStop(0, 'rgba(215, 227, 244, 1)');
            gradient.addColorStop(1, 'rgba(215, 227, 244, 0)');

            $.get(""/get-expense-graph"", function (result) {
                //set predicted spending
                var prediction = parseFloat(result.predicted[result.predicted.length - 1]).toFixed(2);
                if (!isNaN(prediction)) {
                    $('#predicted-spendings').text('$' + prediction);
                    $('#predicted-spendings-message').text(""by day "" + result.predicted.length + "" this month."");

                }

                if (result.predicted.length != 0 && result.actual.length != 0) {

                    new Chart(docume");
                WriteLiteral(@"nt.getElementById(""chartjs-dashboard-line""), {
                        type: 'line',
                        data: {
                            labels: result.days,
                            datasets: [{
                                label: ""Spending ($)"",
                                fill: true,
                                backgroundColor: gradient,
                                borderColor: window.theme.primary,
                                data: result.actual
                            },
                            {
                                label: ""Predicted ($)"",
                                fill: false,
                                backgroundColor: ""transparent"",
                                borderColor: ""#adb5bd"",
                                borderDash: [4, 4],
                                data: result.predicted
                            }]
                        },
                        options: {
                            maintainA");
                WriteLiteral(@"spectRatio: false,
                            legend: {
                                display: false
                            },
                            tooltips: {
                                intersect: false
                            },
                            hover: {
                                intersect: true
                            },
                            plugins: {
                                filler: {
                                    propagate: false
                                }
                            },
                            scales: {
                                xAxes: [{
                                    reverse: true,
                                    gridLines: {
                                        color: ""rgba(0,0,0,0.0)""
                                    }
                                }],
                                yAxes: [{
                                    ticks: {
                        ");
                WriteLiteral(@"                stepSize: 1000
                                    },
                                    display: true,
                                    borderDash: [3, 3],
                                    gridLines: {
                                        color: ""rgba(0,0,0,0.0)""
                                    }
                                }]
                            }
                        }
                    });
                } else {
                    $('#graph-card').hide();
                }
            });

        });
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Spendings.WEB.Controllers.DashboardVm> Html { get; private set; }
    }
}
#pragma warning restore 1591
